name: CI/CD Deployment of .NET 8 API to EC2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment'
        required: true
        type: choice
        options:
          - Development

jobs:
  # ✅ Build Job (Runs in Parallel)
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
    # ✅ Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4

    # ✅ Set up .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    # ✅ Build and publish the API
    - name: Build and publish the API
      run: |
        cd code/src/FinanceManager.API
        dotnet restore
        dotnet build --configuration Release --no-restore
        dotnet publish -c Release -o ./publish

    # ✅ Store build output for deployment
    - name: Store build artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-publish
        path: code/src/FinanceManager.API/publish

---

  # ✅ Setup Job
  ssh-setup:
    runs-on: ubuntu-latest

    steps:
    # ✅ Create SSH key file
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    # ✅ Add EC2 to known hosts
    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # ✅ Store SSH configuration as artifact
    - name: Store SSH configuration
      uses: actions/upload-artifact@v4
      with:
        name: ssh-config
        path: ~/.ssh

---

  # ✅ Deploy Job (Runs After Both Build & Setup)
  deploy:
    runs-on: ubuntu-latest
    needs: [build, ssh-setup]   # Depends on both build and setup jobs

    steps:
    # ✅ Download SSH configuration
    - name: Download SSH config
      uses: actions/download-artifact@v4
      with:
        name: ssh-config
        path: ~/.ssh

    # ✅ Download build artifacts
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: api-publish
        path: ./publish

    # ✅ Set SSH permissions
    - name: Set SSH permissions
      run: |
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh

    # ✅ Deploy build artifacts to EC2
    - name: Copy build artifacts to EC2
      run: |
        scp -i ~/.ssh/id_rsa -r ./publish/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/ec2-expense-manager-api

    # ✅ SSH into EC2 and deploy
    - name: Deploy and restart service on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # ✅ Stop the existing service
          sudo systemctl stop kestrel-api || true

          # ✅ Ensure the directory exists with proper permissions
          sudo mkdir -p /var/www/ec2-expense-manager-api
          sudo chown -R ec2-user:ec2-user /var/www/ec2-expense-manager-api
          sudo chmod -R 755 /var/www/ec2-expense-manager-api

          # ✅ Restart the service
          sudo systemctl start kestrel-api
          sudo systemctl status kestrel-api
