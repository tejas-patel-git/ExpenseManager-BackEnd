{
	"info": {
		"_postman_id": "1f8ce10e-453d-4c40-aaa4-8aeb17a24e60",
		"name": "Finanace Manager",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Get all transactions",
					"id": "ea9cc526-b98e-4a4a-9ef4-c9890cc3d262",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/Transactions"
					},
					"response": [
						{
							"id": "58886c17-6f66-4237-b924-119064e5b4b1",
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/Transactions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Fri, 06 Dec 2024 05:33:32 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"transactionID\": 1,\n        \"isExpense\": true,\n        \"amount\": 50,\n        \"date\": \"2024-11-01T10:00:00\",\n        \"description\": \"Grocery Shopping\"\n    },\n    {\n        \"transactionID\": 2,\n        \"isExpense\": false,\n        \"amount\": 1500,\n        \"date\": \"2024-11-01T15:00:00\",\n        \"description\": \"Salary\"\n    },\n    {\n        \"transactionID\": 3,\n        \"isExpense\": true,\n        \"amount\": 20,\n        \"date\": \"2024-11-02T12:00:00\",\n        \"description\": \"Coffee\"\n    },\n    {\n        \"transactionID\": 4,\n        \"isExpense\": true,\n        \"amount\": 200,\n        \"date\": \"2024-11-01T09:00:00\",\n        \"description\": \"Online Shopping\"\n    },\n    {\n        \"transactionID\": 5,\n        \"isExpense\": false,\n        \"amount\": 1000,\n        \"date\": \"2024-11-01T16:30:00\",\n        \"description\": \"Freelance Payment\"\n    },\n    {\n        \"transactionID\": 6,\n        \"isExpense\": true,\n        \"amount\": 100,\n        \"date\": \"2024-11-02T13:00:00\",\n        \"description\": \"Dining Out\"\n    },\n    {\n        \"transactionID\": 7,\n        \"isExpense\": true,\n        \"amount\": 75,\n        \"date\": \"2024-11-01T11:00:00\",\n        \"description\": \"Gym Membership\"\n    },\n    {\n        \"transactionID\": 8,\n        \"isExpense\": false,\n        \"amount\": 2000,\n        \"date\": \"2024-11-01T17:00:00\",\n        \"description\": \"Bonus\"\n    },\n    {\n        \"transactionID\": 9,\n        \"isExpense\": true,\n        \"amount\": 40,\n        \"date\": \"2024-11-02T14:00:00\",\n        \"description\": \"Gas\"\n    },\n    {\n        \"transactionID\": 10,\n        \"isExpense\": true,\n        \"amount\": 150,\n        \"date\": \"2024-11-01T08:30:00\",\n        \"description\": \"Electronics Purchase\"\n    },\n    {\n        \"transactionID\": 11,\n        \"isExpense\": false,\n        \"amount\": 1800,\n        \"date\": \"2024-11-01T14:00:00\",\n        \"description\": \"Investment Return\"\n    },\n    {\n        \"transactionID\": 12,\n        \"isExpense\": true,\n        \"amount\": 60,\n        \"date\": \"2024-11-02T10:30:00\",\n        \"description\": \"Clothing\"\n    },\n    {\n        \"transactionID\": 13,\n        \"isExpense\": true,\n        \"amount\": 120,\n        \"date\": \"2024-11-01T07:45:00\",\n        \"description\": \"Utilities\"\n    },\n    {\n        \"transactionID\": 14,\n        \"isExpense\": false,\n        \"amount\": 1500,\n        \"date\": \"2024-11-01T13:45:00\",\n        \"description\": \"Salary\"\n    },\n    {\n        \"transactionID\": 15,\n        \"isExpense\": true,\n        \"amount\": 35,\n        \"date\": \"2024-11-02T09:45:00\",\n        \"description\": \"Snacks\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get Transaction by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13168e85-b43d-4252-9af5-048b6212c307",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"TransactionID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.transactionID).to.exist.and.to.be.a('number').and.to.satisfy((value) => value >= 0, \"TransactionID should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Amount is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.amount).to.be.a('number');",
									"    pm.expect(responseData.amount).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "54621cad-c0db-4916-904f-986de3431747",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/transaction/2",
						"description": "Retrieves a transaction by its ID."
					},
					"response": [
						{
							"id": "41133c20-6ada-4c1b-8a03-9d9b0bab3543",
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/transaction/2"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 22 Dec 2024 05:10:26 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"transactionID\": 2,\n    \"isExpense\": false,\n    \"amount\": 1500,\n    \"date\": \"2024-11-01T15:00:00\",\n    \"description\": \"Salary\"\n}"
						}
					]
				},
				{
					"name": "Get All Transactions by User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(transaction) {",
									"        pm.expect(transaction).to.have.property('transactionID');",
									"        pm.expect(transaction).to.have.property('isExpense');",
									"        pm.expect(transaction).to.have.property('amount');",
									"        pm.expect(transaction).to.have.property('date');",
									"        pm.expect(transaction).to.have.property('description');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Amount is a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(transaction) {",
									"    pm.expect(transaction.amount).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(transaction) {",
									"    pm.expect(transaction.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "36b1c3a4-d721-46da-8a06-e1ed7c10eb4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/transaction/user/1",
						"description": "Retrieves all transactions for a specific user."
					},
					"response": []
				},
				{
					"name": "Add Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.transactionID).to.exist;",
									"    pm.expect(responseData.isExpense).to.exist;",
									"    pm.expect(responseData.amount).to.exist;",
									"    pm.expect(responseData.date).to.exist;",
									"    pm.expect(responseData.description).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Amount is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.amount).to.be.a('number');",
									"    pm.expect(responseData.amount).to.be.at.least(0, \"Amount should be a non-negative number\");",
									"});",
									"",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Description is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dd40dade-a765-43ef-95bb-ea596207cca3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExpense\": false,\n    \"amount\": 50.00,\n    \"date\": \"2024-11-01T10:00:00\",\n    \"description\": \"Grocery Shopping\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/transaction",
						"description": "Adds a new transaction."
					},
					"response": []
				},
				{
					"name": "Update Transaction",
					"id": "96b68887-8c85-4791-8059-fe7c5b970b64",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionID\": 1,\n    \"isExpense\": false,\n    \"amount\": 50.00,\n    \"description\": \"UPDATE Grocery Shopping\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/transaction/1",
						"description": "Updates an existing transaction."
					},
					"response": []
				},
				{
					"name": "Delete Transaction",
					"id": "9051ceec-f87d-4231-9cd5-4968600b4c09",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/transaction/?transactionId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								""
							],
							"query": [
								{
									"key": "transactionId",
									"value": null,
									"type": "text"
								}
							]
						},
						"description": "Deletes a transaction by its ID."
					},
					"response": []
				}
			],
			"id": "de11a272-4942-4526-adc2-a70780a2f60d"
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": {
			"accessTokenUrl": "{{vault:oauth-token-url}}",
			"scope": "read:user",
			"tokenRequestParams": [
				{
					"key": "audience",
					"value": "{{vault:audience-dev}}",
					"enabled": true,
					"send_as": "request_body"
				}
			],
			"clientSecret": "{{vault:client-secret-dev}}",
			"client_authentication": "header",
			"clientId": "{{vault:client-id-dev}}",
			"grant_type": "client_credentials",
			"addTokenTo": "header"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "46734154-05b1-4e86-ba6e-bff8fa87605f",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "802e3d19-2ff8-4cae-bfc0-0a7ce7110a32",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5277/api"
		}
	]
}